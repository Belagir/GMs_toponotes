[gd_scene load_steps=7 format=3 uid="uid://cdl5h235jfx4x"]

[ext_resource type="Script" path="res://scenes/user_camera/UserCamera.gd" id="1_7isvh"]
[ext_resource type="Script" path="res://source/node_state_machine/StateMachine.gd" id="2_ax8ya"]

[sub_resource type="GDScript" id="GDScript_64gcp"]
resource_name = "CursorInactive"
script/source = "extends PinHoveredAwareState
# cursor inactive state

func on_enter(args : Dictionary) -> void:
	super(args)


func on_input(event : InputEvent) -> void:
	if event.is_action_pressed(\"click left\"):
		_owner_state_machine.transition_to(\"CursorClicking\", { \"pins hovered\" = _pins_hovered })
	elif event.is_action_pressed(\"click right\"):
		_owner_state_machine.transition_to(\"CursorContextClicking\", { \"pins hovered\" = _pins_hovered })


func on_leave() -> void:
	super()

func _update_pin_hovered(pin : Pin, entered : bool) -> void:
	super(pin, entered)
	if entered and (pin.state() == \"Ignored\"):
		pin.to_state(\"Highlighted\")
	elif not entered and (pin.state() == \"Highlighted\"):
		pin.to_state(\"Ignored\")
"

[sub_resource type="GDScript" id="GDScript_nxyok"]
resource_name = "CursorClicking"
script/source = "extends PinHoveredAwareState
# cursor is clicking state


var _flag_pins_were_deselected : bool = false


func on_enter(args : Dictionary) -> void:
	super(args)
	GlobalEvents.switched_pin_state.connect(_pin_was_deselected)


func on_input(event : InputEvent) -> void:
	var mouse_movement : InputEventMouseMotion = event as InputEventMouseMotion
	
	if mouse_movement:
		_owner_state_machine.transition_to(\"CursorDragging\", { \"pins hovered\" = _pins_hovered, \"cam start\" = owner.position, \"drag start\" = mouse_movement.position })
	elif event.is_action_released(\"click left\"):
		if _pins_hovered.size() > 0:
			if _pins_hovered.front().state() == \"Selected\":
				_pins_hovered.front().to_state(\"Highlighted\")
			else:
				_pins_hovered.front().to_state(\"Selected\")
				GlobalEvents.focused_pin.emit(_pins_hovered.front())
		else:
			_flag_pins_were_deselected = false
			GlobalEvents.requested_deselection_of_all_pins.emit()
			if not _flag_pins_were_deselected:
				GlobalEvents.requested_new_default_pin.emit(owner.get_global_mouse_position())
		_owner_state_machine.transition_to(\"CursorInactive\", { \"pins hovered\" = _pins_hovered })


func on_leave() -> void:
	super()
	GlobalEvents.switched_pin_state.disconnect(_pin_was_deselected)


func _pin_was_deselected(_pin : Pin, old_state : String, _new_state : String) -> void:
	_flag_pins_were_deselected = _flag_pins_were_deselected or (old_state == \"Selected\") or (old_state == \"Examined\")
"

[sub_resource type="GDScript" id="GDScript_4gpp1"]
resource_name = "CursorDragging"
script/source = "extends PinHoveredAwareState
#cursor is dragging something across the screen


# camera start position in the event of dragging
var _camera_start_pos : Vector2 = Vector2(0, 0)
# mouse start position in the event of dragging
var _dragging_start_pos : Vector2 = Vector2(0, 0)

var _dragged_pin : Pin = null


func on_enter(args : Dictionary) -> void:
	super(args)
	
	if not args.has_all([\"cam start\", \"drag start\"]):
		_owner_state_machine.transition_to(\"CursorInactive\", { \"pins hovered\" = _pins_hovered })
		return
	
	_camera_start_pos = args[\"cam start\"]
	_dragging_start_pos = args[\"drag start\"]
	_dragged_pin = _pins_hovered.front() if _pins_hovered.size() > 0 else null
	if _dragged_pin:
		GlobalEvents.focused_pin.emit(_dragged_pin)



func on_input(event : InputEvent) -> void:
	var mouse_movement : InputEventMouseMotion = event as InputEventMouseMotion
	
	if event.is_action_released(\"click left\"):
		_owner_state_machine.transition_to(\"CursorInactive\", { \"pins hovered\" = _pins_hovered })
	elif mouse_movement and not _dragged_pin:
		owner.drag_camera(mouse_movement, _camera_start_pos, _dragging_start_pos)
	elif mouse_movement and _dragged_pin:
		_dragged_pin.move_to(owner.keep_in_my_map(owner.get_global_mouse_position()))


func on_leave() -> void:
	super()

"

[sub_resource type="GDScript" id="GDScript_vdnpc"]
resource_name = "CursorContextClicking"
script/source = "extends PinHoveredAwareState


func on_enter(args : Dictionary) -> void:
	super(args)


func on_input(event : InputEvent) -> void:
	if event.is_action_released(\"click right\"):
		if _pins_hovered.size() > 0:
			_pins_hovered.front().to_state(\"Examined\")
			GlobalEvents.focused_pin.emit(_pins_hovered.front())
		_owner_state_machine.transition_to(\"CursorInactive\", { \"pins hovered\" = _pins_hovered })


func on_leave() -> void:
	super()
"

[node name="UserCamera" type="Camera2D"]
script = ExtResource("1_7isvh")

[node name="StateMachineClickActions" type="Node" parent="."]
script = ExtResource("2_ax8ya")
initial_state = NodePath("CursorInactive")

[node name="CursorInactive" type="Node" parent="StateMachineClickActions"]
script = SubResource("GDScript_64gcp")

[node name="CursorClicking" type="Node" parent="StateMachineClickActions"]
script = SubResource("GDScript_nxyok")

[node name="CursorDragging" type="Node" parent="StateMachineClickActions"]
script = SubResource("GDScript_4gpp1")

[node name="CursorContextClicking" type="Node" parent="StateMachineClickActions"]
script = SubResource("GDScript_vdnpc")
